<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--进行持久层接口mapper层中的UserMapper中的两个抽象方法的映射配置-->
<!-- 项目中第一次使用SQL映射，所以需要在application.properties中添加mybatis.mapper.locations属性的配置，以指定XML文件的位置-->

        <!-- namespace属性：用于制定当前的映射文件和哪个接口进行映射，要指定接口的文件路径，要标注包的完整路径接口-->
<mapper namespace="com.bistu.store.mapper.CommentMapper">
    <!--自定义映射规则：resultMap标签来完成映射规则的定义-->
    <!--
    id属性：标签给该映射规则分配一个唯一的id值，对应的为resultMap="id属性的值"属性的取值
    type属性：取值为一个类，表示数据库中的查询结果与java中的哪个实体类进行结果集的映射
    -->
    <resultMap id="CommentEntityMap" type="com.bistu.store.entity.Comment">
    <!--将表资源与类的属性不一致字段进行匹配指定，名称一致字段可省略不写-->
        <!-- 配合完成名称不一致的映射
        column与数据库表当中一致表示表中资源名称，property与属性当中名字一致表示类中属性名称
        -->
        <!--在定义映射规则时主键不可省略-->
        <id column="id" property="id"/>
        <result column="p_comment" property="pComment"></result>
        <result column="b_comment" property="bComment"></result>
        <result column="judge_mark" property="judgeMark"></result>
        <result column="created_user" property="createdUser"/>
        <result column="created_time" property="createdTime"/>
        <result column="modified_user" property="modifiedUser"/>
        <result column="modified_time" property="modifiedTime"/>
    </resultMap>

    <!--id属性：表示映射接口中的方法的名称，直接在标签的内容部来编写SQL语句-->
    <!--
    useGeneratedKeys属性:表示开启某个字段的值递增（主键设置为递增）
    keyProperty：标签将表中的哪个字段作为主键进行递增
    -->
    <!-- 插入用户数据：Integer insert(User user) -->
    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO
            t_comment (uid, bid, oid, pid, p_comment, b_comment, judge_mark, reply, created_user, created_time, modified_user, modified_time)
        VALUES
            (#{uid}, #{bid}, #{oid}, #{pid}, #{pComment}, #{bComment}, #{judgeMark}, #{reply}, #{createdUser}, #{createdTime}, #{modifiedUser}, #{modifiedTime})
    </insert>

    <update id="updateByBid" >
        UPDATE t_comment
        SET
            reply=#{reply}
        WHERE
            uid=#{uid} AND bid=#{bid} AND pid=#{pid} AND oid=#{oid}
    </update>

    <!--select语句在执行时查询结果为一个对象多个对象-->
    <!--
    resultType属性：表示查询结果集类型，只需要指定对应映射类的类型，且包含完整包接口
    resultMap：表示当表的资源与类的对象属性的字段名不一致时，来自定义查询结果集的映射规则
    -->
    <select id="findByUid" resultMap="CommentEntityMap">
        SELECT * FROM  t_comment WHERE uid=#{uid}
    </select>

    <select id="findByBid" resultMap="CommentEntityMap">
        SELECT * FROM  t_comment WHERE bid=#{bid}
    </select>

    <select id="findByPid" resultMap="CommentEntityMap">
        SELECT * FROM  t_comment WHERE pid=#{pid}
    </select>

</mapper>